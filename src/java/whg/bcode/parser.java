
//----------------------------------------------------
// The following code was generated by CUP v0.11b ${cupversion} (SVN rev )
//----------------------------------------------------

package whg.bcode;

import java.io.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;

/** CUP v0.11b ${cupversion} (SVN rev ) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super(new ComplexSymbolFactory());}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s, new ComplexSymbolFactory());}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\004\004\000\002\012\003\000\002\015\004" +
    "\000\002\016\003\000\002\016\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\003\004\000\002\003\005\000\002\010" +
    "\003\000\002\010\004\000\002\011\006\000\002\005\002" +
    "\000\002\005\004\000\002\005\004\000\002\024\002\000" +
    "\002\013\005\000\002\014\004\000\002\014\005\000\002" +
    "\006\003\000\002\006\005\000\002\007\003\000\002\007" +
    "\005\000\002\023\003\000\002\023\004\000\002\022\003" +
    "\000\002\022\006\000\002\021\003\000\002\021\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\023\006\001\002\000\004\002\075\001" +
    "\002\000\006\002\uffff\023\uffff\001\002\000\006\004\ufffb" +
    "\013\025\001\002\000\006\002\000\023\006\001\002\000" +
    "\006\002\ufffd\023\ufffd\001\002\000\004\004\012\001\002" +
    "\000\014\005\024\020\014\021\016\022\017\023\023\001" +
    "\002\000\010\002\ufffc\011\ufffc\023\ufffc\001\002\000\006" +
    "\011\ufff8\023\ufff8\001\002\000\006\011\ufff9\023\ufff9\001" +
    "\002\000\006\011\ufff7\023\ufff7\001\002\000\006\011\ufff6" +
    "\023\ufff6\001\002\000\014\005\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\001\002\000\014\005\073\020\014\021\016" +
    "\022\017\023\023\001\002\000\006\011\027\023\032\001" +
    "\002\000\012\004\ufffb\011\ufff5\013\025\023\ufff5\001\002" +
    "\000\010\002\ufff4\011\ufff4\023\ufff4\001\002\000\004\023" +
    "\026\001\002\000\004\004\ufffa\001\002\000\004\023\032" +
    "\001\002\000\010\006\uffe4\015\uffe4\016\uffe4\001\002\000" +
    "\010\006\uffef\015\045\016\047\001\002\000\012\006\uffe2" +
    "\007\033\015\uffe2\016\uffe2\001\002\000\006\023\036\025" +
    "\035\001\002\000\004\010\044\001\002\000\006\010\uffde" +
    "\014\uffde\001\002\000\010\010\uffdd\012\042\014\uffdd\001" +
    "\002\000\006\010\uffe0\014\040\001\002\000\004\025\041" +
    "\001\002\000\004\010\uffdf\001\002\000\004\025\043\001" +
    "\002\000\006\010\uffdc\014\uffdc\001\002\000\010\006\uffe1" +
    "\015\uffe1\016\uffe1\001\002\000\004\023\050\001\002\000" +
    "\004\006\067\001\002\000\004\023\050\001\002\000\004" +
    "\004\uffec\001\002\000\004\006\uffed\001\002\000\004\004" +
    "\053\001\002\000\010\005\061\023\060\024\056\001\002" +
    "\000\004\006\uffeb\001\002\000\006\005\uffe8\017\uffe8\001" +
    "\002\000\006\005\uffe6\017\uffe6\001\002\000\006\005\065" +
    "\017\064\001\002\000\004\015\062\001\002\000\004\006" +
    "\uffea\001\002\000\004\025\063\001\002\000\006\005\uffe5" +
    "\017\uffe5\001\002\000\006\023\060\024\056\001\002\000" +
    "\004\006\uffe9\001\002\000\006\005\uffe7\017\uffe7\001\002" +
    "\000\014\005\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\001" +
    "\002\000\004\006\uffee\001\002\000\010\006\uffe3\015\uffe3" +
    "\016\uffe3\001\002\000\014\005\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\001\002\000\010\002\ufff3\011\ufff3\023\ufff3" +
    "\001\002\000\006\002\ufffe\023\ufffe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\014\002\003\004\006\012\004\015\007\016" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\073\015\007\016\010\001\001\000" +
    "\002\001\001\000\004\003\012\001\001\000\014\010\020" +
    "\011\017\015\014\016\010\017\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\071\015" +
    "\014\016\010\017\021\001\001\000\006\022\027\023\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\070\001\001\000\002" +
    "\001\001\000\004\005\045\001\001\000\002\001\001\000" +
    "\006\020\036\021\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\067\001\001\000\002\001" +
    "\001\000\004\013\050\001\001\000\004\024\051\001\001" +
    "\000\002\001\001\000\004\014\053\001\001\000\006\006" +
    "\056\007\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unused"})
class CUP$parser$actions {



	static class declarator {
		declarator(String name, boolean isarray, String leng, String start) {
			this.name = name;
			this.isarray = isarray;
			this.leng = leng;
			this.start = start;
		}
		String name;
		boolean isarray;
		boolean noparse;
		String leng;
		String start;
	}
	
	static class classinfo {
		String cn;
		String sn;
		StringBuilder ctorparams;
		StringBuilder ctorargs;
		List<String> ctorstmts = new ArrayList<String>();
	}
	
	private static final File DIR = new File("src/java/whg/bcode/dom");
	private static final String PACKAGE_NAME = "whg.bcode.dom";
	private static final String NODE_CLASS = "whg.bcode.Node";
	private static final String NODE_CLASS_PARAMS = "NodeFactory nf";
	private static final String NODE_CLASS_ARGS = "nf";
	
	private final Map<String, String> ctorparamsMap = new HashMap<String, String>();
	{
		ctorparamsMap.put(NODE_CLASS, NODE_CLASS_PARAMS);
	}
	
	private final Map<String, String> ctorargsMap = new HashMap<String, String>();
	{
		ctorargsMap.put(NODE_CLASS, NODE_CLASS_ARGS);
	}
	
	private int fc = 0;
	private String fn;
	private PrintStream ps;
	private PrintStream eps;
	
	private Stack<classinfo> stack = new Stack<classinfo>();
	
	private String prefix() {
		int lvl = stack.size() - 1;
		String prefix = "";
		while (lvl-->0)
			prefix += "\t";
		return prefix;
	}
	
	private void printf(String format, Object ... args) {
		String prefix = prefix();
		format = String.format("%s%s", prefix, format);
		ps.printf(format, args);
	}
	
	private void log(String format, Object ... args) {
		System.err.printf(format, args);
	}
	
	private void startfile(String cn) {
		try {
			fn = String.format("%s.java", cn);
			log("%15s: %s\n", "start file", fn);
			File file = new File(DIR, fn);
			ps = new PrintStream(file, "UTF-8");
			printf("package %s;\n", PACKAGE_NAME);
			printf("import java.io.*;\n");
			printf("import whg.bcode.*;\n");
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	private void endfile() {
	  	ps.close();
	  	fn = null;
	  	fc++;
	}
	
	private void startenum(String cn) {
		try {
			String fn = String.format("%s.java", cn);
			log("%15s: %s\n", "start enum", fn);
			File file = new File(DIR, fn);
			eps = new PrintStream(file, "UTF-8");
			eps.printf("package %s;\n", PACKAGE_NAME);
			eps.printf("public class %s {\n", cn);
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	private void endenum() {
		eps.printf("}\n");
	  	eps.close();
	}
	
	public void startclass(String cn, String sn) {
		if (sn == null)
			sn = NODE_CLASS;
		classinfo classinfo = stack.push(new classinfo());
		classinfo.cn = cn;
		classinfo.sn = sn;
		String modifiers = "";
		if (stack.size() > 1)
			modifiers = "static";
		printf("public %s class %s extends %s {\n", modifiers, cn, sn);
		String initCtorParams = ctorparamsMap.get(sn);
		classinfo.ctorparams = new StringBuilder(initCtorParams==null?"":initCtorParams);
		String initCtorArgs = ctorargsMap.get(sn);
		classinfo.ctorargs = new StringBuilder(initCtorArgs==null?"":initCtorArgs);
	}
	
	public void endclass() {
		classinfo classinfo = stack.peek();
		String ctorargs = ctorargsMap.get(classinfo.sn);
		printf("\tpublic %s(%s) throws IOException {\n", classinfo.cn, classinfo.ctorparams.toString());
		printf("\t\tsuper(%s);\n", ctorargs);
		for (String stmt : classinfo.ctorstmts) {
			printf("\t\t%s\n", stmt);
		}
		printf("\t}\n");
		printf("}\n");
		ctorparamsMap.put(classinfo.cn, classinfo.ctorparams.toString());
		ctorargsMap.put(classinfo.cn, classinfo.ctorargs.toString());
		stack.pop();
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= input EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // input ::= declaration_list 
            {
              Object RESULT =null;
		 log("%15s: %d\n", "file count", fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= top_declaration 
            {
              Object RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list top_declaration 
            {
              Object RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_declaration ::= declaration 
            {
              Object RESULT =null;
		
	  	log("%15s: %s\n", "end file", fn);
	  	endfile();
	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= header composite_type 
            {
              String RESULT =null;
		Location hxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location hxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  	RESULT = h;
		log("%15s\n", "end class");
		endclass();
	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= IDENTIFIER 
            {
              String RESULT =null;
		Location cnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String cn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  	RESULT = cn;
	  	if (fn == null) {
	  		startfile(cn);
	  	}
	  	log("%15s: %s\n", "start class", cn);
	  	startclass(cn, null);
	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= IDENTIFIER EXTENDS IDENTIFIER 
            {
              String RESULT =null;
		Location cnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location cnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String cn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  	RESULT = cn;
	  	if (fn == null) {
			startfile(cn);
	  	}
	  	log("%15s: %s\n", "start class", cn);
	  	startclass(cn, sn);
	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= declaration 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= U4 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= U2 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_specifier ::= U1 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_specifier ::= IDENTIFIER 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // composite_type ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("composite_type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // composite_type ::= LBRACE member_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("composite_type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // member_list ::= member 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("member_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // member_list ::= member_list member 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("member_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // member ::= type_specifier xdeclarator domain SEMICOLON 
            {
              Object RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		declarator d = (declarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  	String type = t;
	  	if ("u4".equals(t)) {
	  		type = "int" + (d.isarray?"[]":"");
	  	} else if ("u2".equals(t)) {
	  		type = "int" + (d.isarray?"[]":"");
	  	} else if ("u1".equals(t)) {
	  		type = d.isarray?"byte[]":"int";
	  	} else {
	  		type = t + (d.isarray?"[]":"");
	  	}
		String decl = String.format("%s %s", type, d.name);
		printf("\tpublic %s;\n", decl);
		if (d.noparse) {
			stack.peek().ctorparams.append(String.format(", %s", decl));
			stack.peek().ctorargs.append(String.format(", %s", d.name));
			String stmt = String.format("this.%s = %s;", d.name, d.name);
			stack.peek().ctorstmts.add(stmt);
		} else {
			String stmt = null;
			if (d.isarray) {
			  	if ("u4".equals(t)) {
			  		type = "int";
			  	} else if ("u2".equals(t)) {
			  		type = "short";
			  	} else if ("u1".equals(t)) {
			  		type = "byte";
			  	} else {
			  		type = t;
			  	}
				stmt = String.format("array(%s.class, \"%s\", %s, %s);", type, d.name, d.leng, d.start);
			} else if ("double".equals(t)) {
				stmt = String.format("this.%s = nf.readDouble();", d.name);
			} else if ("long".equals(t)) {
				stmt = String.format("this.%s = nf.readLong();", d.name);
			} else if ("float".equals(t)) {
				stmt = String.format("this.%s = nf.readFloat();", d.name);
			} else if ("int".equals(t)) {
				stmt = String.format("this.%s = nf.readInt();", d.name);
			} else if ("String".equals(t)) {
				stmt = String.format("this.%s = nf.readUtf8();", d.name);
			} else {
				stmt = String.format("%s(\"%s\");", t, d.name);
			}
			stack.peek().ctorstmts.add(stmt);
		}
	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("member",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // domain ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // domain ::= EQ enum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // domain ::= AST enum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 startenum(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // enum ::= IDENTIFIER NT$0 enum_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 endenum(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // enum_body ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // enum_body ::= LBRACE const_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // const_list ::= const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // const_list ::= const_list COMMA const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // const ::= STRING 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 eps.printf("\tpublic static final String %s = %s;\n", s.substring(1,s.length()-1), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // const ::= IDENTIFIER EQ NUMBER 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 eps.printf("\tpublic static final int %s = %d;\n", id, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // xdeclarator ::= declarator 
            {
              declarator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		declarator d = (declarator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xdeclarator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // xdeclarator ::= AT declarator 
            {
              declarator RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		declarator d = (declarator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; d.noparse = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("xdeclarator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarator ::= IDENTIFIER 
            {
              declarator RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new declarator(n, false, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarator ::= IDENTIFIER LBRACKET leng RBRACKET 
            {
              declarator RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String[] l = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new declarator(n, true, l[0], l[1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // leng ::= expr 
            {
              String[] RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String[] {n, "0"}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leng",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // leng ::= expr COLON NUMBER 
            {
              String[] RESULT =null;
		Location n1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location n1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location n2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location n2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		int n2 = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String[] {n1, ""+n2}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leng",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= NUMBER 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ""+n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IDENTIFIER 
            {
              String RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= IDENTIFIER MINUS NUMBER 
            {
              String RESULT =null;
		Location n1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location n1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location n2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location n2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		int n2 = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = String.format("%s-%s", n1, ""+n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

